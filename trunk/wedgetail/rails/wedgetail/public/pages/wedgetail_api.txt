<h2>Wedgetail API</h2>

Version: 0.1

1 Introduction

This document describes a programmatic interface for the wedgetail system, which allows local clients and third-party
systems to exchange messages and query the server. It is based on the REST prinicples [1]

2 Rationale

This interface exists because there is no clear standard for this purpose in Australia. There are alternatives such as
XDS, a SOAP-based interface, or a HL7-query-based interface. However proponents of such interfaces *must* provide a
complete technical specification to be considered for wedgetail.

3 Underlying protocol stack

Connections are made to the server using HTTPS [2,4], it is assumed the client knows the DNS address of the server. The
port is assumed to be 443 unless specifically arranged otherwise. For each API function this standard specifies the
absolute path within the server, thus forming a URI with the server name. All paths begin with "/rest/".

Where the path provided coontains "XXX" or "YYY" these should be substituted with specific data elements as defined for
that function.

The standard also specifies the HTTP verb to use (GET or POST) and the MIME-type of the documents that are sent and
received.

For many functions the document to be sent is in the type "application/x-www-form-urlencoded"[3], in this case this
document will set out the names, values, optionality and meaning of the values to be included. The server will silently
ignore name/value pairs not defined in this standard. Conversely new versions of this standard may define new name/value
pairs, however these new pairs will be optional for any given function.

Some functions return structured data. The data is returned with MIME type text/plain. Each logical record is terminated
by a standard newline (the byte pair 0x0D 0x0A) and fields separated by tabs (byte 0x09). The data elements themselves are
UTF-8 text and guaranteed not to contain these characters. This standard defines the order and meaning of the fields.
Later versions may define extra fields, therefore if a record contains more fields than a client expects, the extra fields
should be silently discarded. If the field is defined as "a date", it will be in the form DD/MM/YYYY.

4 Database structure

Logically the wedgetail database is a large flat collection of documents. Documents are of varying MIME types and are also
tagged by creation date, associated patient, user who uploaded them, and logical type. Documents are immutable once
created. Documents may exist on various servers, synchronisation functions allow all the servers to maintain a single list
of patients and a single index of documents, the documents themselves exist on only one server on the network.

Patient records are mutable, in the sense that a new record with the same patient ID can be created and made available for
synchronisation, this replaces the old. The newest patient record is always the current one. However servers can still use
old records for searching, such as for maiden names.

"logical type" refers to their *clinical* role and is independent of their acutal format. The type is a number, current
types are 1 - Health Summary 2 - List of Medications 3 - Discharge Summary 4 - Progress Note 5 - Allergies 6 - Scrapbook 7
- Pathology/Radiology Result 8 - Letter to/from a specialist 9 - Record of Immunisations

5 Security & Authorisation

Cryptographic security is provided by the SSL/TLS layer of HTTPS. Clients authenticate using HTTP Basic authentication [5]
for all connections.

5.1 Users

Clients should be aware that access to patient files, including appearance in search results, is dependent upon the
server's authorisation model and the access granted to that specific user. Intentionally, clients will not be able to
distinguish between when a patient is non-existent, and when they do not have sufficient access for the operation in
question.

5.2 Patients

It is also possible to authenticate as a patient. The username is the wedgetail patient ID and the password is the patient
password (see 6.6) Patient's access privileges are generally limited to documents about them and updating their own
demographic details.

6 Interface functions

6.1 Upload

URI: /rest/upload HTTP verb: POST Document sent: Varies Document received: Varies Status code: 200,500

This URI is used to submit a document to the wedgetail server. Documents sent may have the following MIME types

6.1.1 application/edi-hl7

This is a HL7 version 2.x message. [7] If the HL7 message is an ACK, the status code will always be 200 and no document
will be returned. Otherwise the message is interpreted as a new document to add to the database, the document returned
will be a HL7 acknowledgement message. The status code is 200 if processed successfully, 500 if not [so clients may not
need to process it ACK, as they know the success/failure of processing from the HTTP status code]

Querying the database and creating/changing patient details is possible via HL7 messages, but not currently implemented.
It will be implemented if a third-party (even just one) indicates that they would use it.

HL7 version 3 is not supported at this time.

6.1.2 text/plain

In this case the text will be scanned for one of two strings.

wedgetail: XXXX

where XXXX is the wedgetail ID for the patient, or

Re: SURNAME, FIRSTNAME, dob DD/MM/YY

where SURNAME and FIRSTNAME are the patient's sur- and firstname, and DD/MM/YYYY is the patient's date of birth. Note that
"Re:" must begin the line, and there must be a second comma after the firstname.

This information will then be used to match the patient in the wedgetail database and the document will be associated with
that patient.

On success 200 is returned with an empty document, on failure, 500 is returned with a text/plain document containing the
error message.

6.1.3 application/x-rtf

This refers to the Rich Text Format. These documents are translated and interpreted as for plain text documents, with the
same responses. The server will also accept Microsoft Word documents and *attempt* to parse them however successful
processing of this secret proprietary format cannnot be guaranteed, its use is very strongly discouraged.

6.1.4 application/x-pit

This refers to the Pathology Information Transfer format [6]. The document is parsed and matched to a patient. Responses
are as for 5.1.2. It is permissable to embed an RTF document using a single line 301 in the PIT document.

6.1.5 application/octet-stream

The server will attempt to analyse the document and parse it according to one of the above types although this detection
is not perfect, it is recommended to set the MIME type correctly.

6.2 Upload, Patient specified.

6.1 allows upload of documents where the patient's identity and the document type is determined by inspection of the
document. This function allows the client to directly specify the patient identity using a wedgetail ID (presumably
retrieved from one of the other functions or manually given through the clients user interface.)

URI: /rest/upload_id/XXX/YYY where XXX is the wedgetail ID YYYY is the logical type HTTP verb: POST Document sent: Varies
Document recieved: text/plain or no document. Status codes: 200, 404, 500

The document sent may be text/plain, RTF, or text/html. It is not analysed for internal structure, instead stored in the
database as-is (RTFs are translated to HTML interally) HTTP status code is 200 - success, empty document returned 404 - no
such patient, OR no access to the patient, empty document returned 500 - other error, text/plain returned with error
details

6.3 Search Patient

URI: /rest/search HTTP verb: POST Document sent: application/x-www-form-urlencoded Document recieved: text/plain Status
codes: 200, 500

This function searches for a patient in the database. The following parameters may be set in the form document:

 surname - patient surname firstname- patient firstname aka - a nickname medicare- Medicare number. Digits only. postcode
- always and only 4 digits dob - date of birth sex - M=male, F=female. max - integer, maximum number of results returned

Names are searched as matching a prefix of the patient's actual name, so SMI will match SMITH, SMITHERS, etc. Multiple
parameters are joined with a logical AND (so a patient must match all), however the search algorithm will drop some
parameters to find a match if initially it fails. All parameters are optional but the search will fail if too many
patients match, this is a server defined limit separate to the result limit "max" above

Returned data is in plain text, fields are: wedgetail, surname, firstname, dob, medicare, sex, address, town, postcode,
state home telephone "wedgetail" is the server-assigned ID for this patient. This is unique across the network and
contains only alphanumeric characters.

Note that the server searches by all names the patient ever had, such maiden names, but returns the *current* name, so
returned patients may not appear to match the search criteria.

Note a failed search has status code 200 but an empty document. Status code 500 is the only other allowed and would
generally mean a server bug.

6.4 Search documents

URI: /rest/find_doc/XXX where XXX is the wedgetail ID as returned in 6.3 HTTP verb: POST or GET Document sent:
application/x-www-form-urlencoded Document received: text/plain Status codes: 200, 500

Searches for documents associated with a specific patient. If done as a GET, a full list of all documents (up to a
server-defined maximum) is returned. If POST, the following paramters are accepted

 from - a date, documents must be after this date to - documents must be before this date mime - documents must be of this
mime-type (current types allowed are application/x-hl7, application/x-pit, text/plain, text/html) type - logical type
author - username of author/uploader url - a URL path, which when appended to https://SERVERNAME/ will display the
document in a browser. wedgetail - the patient ID, can be used instead of XXX in the path.

All are optional, multiple parameters are joined by a logical AND.

Returned text is structured, fields are - id - the internal document ID - logical type - mime type - date of creation (or
upload if creation date can't be extracted from document) - author's username - the DNS hostname of the server within
which the document is located. Empty string if it is the same server as the one connected to. If it is another server,
clients must establish a separate connection and authenticate to that server (Note 5.2 in this context, if the user
doesn't have an account on that server, they could potentially get the patient to access the document for them, as
patients have access to their documents on all servers)

The document ID and username are guaranteed unique on a given server but not across the whole system.

Note a failed search has status code 200 but an empty document. Status code 500 is the only other allowed and would
generally mean a server bug.

6.5 Download documents

URI: /rest/document/XXX XXX is the internal document ID as for 6.4 HTTP verb: GET Document sent: N/A (as always GET)
Document recieved: Varies Status codes: 200, 404, 500

Downloads the specified document. 404 means no such document or no access to it. 500 would generally mean a server bug,
document returned is text/plain with error message.

6.6 Synchronise patients

URI: /rest/sync_patients/YYYYMMDD where YYYMMDD is the year,month, day of the last time synchronisation occurred with this
server. HTTP verb: GET Document sent: N/A Document recieved: text/plain Status codes: 200, 403, 500

Returns a list of all patient records created or changed since the last synchronisation. Not all users may have access to
this function. Patient records may either be new, or updating an existing patient, in the latter case the server will
already have a record with the same wedgetail ID, the new record replaces it.

[Currently synchronisation is by manual arrangement, IMHO this is OK, the OpenPGP keyserver system shows this can scale
fairly well.]

Fields returned are: - date patient record created or changed - wedgetail - unique patient ID across the system - surname,
- firstname, - dob, - medicare, - sex, (M=male, F-female) - address, a free string of street and house number - town, -
postcode, always four digits - state, max 3 letters - home telephone - salt, a random string - password hash (using the
salt) - old password salt - old password hash

The old password fields can be blank if the patient has never changed their password. When it is changed the old password
is rehashed *with a different salt* and listed in these fields. This is to prove to other servers that the old password
was known when assigning the new one. [otherwise servers could just claim the patient changed the password with them and
gain access to records as the updated entry filtered through the system]

Status code is 200 on success, 403 if no privilege and 500 otherwise.

6.7 Synchronise documents

URI: /rest/sync_docs/YYYYMMDD where YYYYMMDD is the year,month,day of the last time synchronisation occurred with this
server HTTP verb: GET Document sent: N/A Document recieved: text/plain Status codes: 200, 403, 500

Not all users may have privilege to do this. It returns the list of all documents, for all users, uploaded since the date
given, on this server only. It's purpose is to allow servers to maintain a synchronised list of all documents.

Fields are: - id - the internal document ID - logical type - mime type - date of creation (or upload if creation date
can't be extracted from document) - author's username - home server (never blank, servers put their own hostname when
required)

Note again document ID and username are only unique to one server. Entries from the server making the request should be
excluded. Note that if you synchronise from two servers which synchronise to each other, you could get the same document
index entry from both.

Status code is 200 on success, 403 if no privilege and 500 otherwise.

6.8 Change patient details

URI: /rest/change_patient/XXXX where XXX is the wedgetail ID HTTP verb: POST Document sent:
application/x-www-form-urlencoded Document recieved: text/plain or none Status codes: 200, 404, 500

This function allows alteration of patient details. All parameters are optional, if not present the value is left
unchanged. With the exception that the old password must be provided when changing the password.

- wedgetail - unique patient ID across the system, can be included instead of XXXX in the URI above. - surname - firstname
- dob - medicare - sex, (M=male, F-female) - address, a free string of street and house number - town - postcode, always
four digits - state, max 3 letters - home telephone - password - old password

Returns HTTP status 200 with no document is successful, 404 if patient non-existent or no access, 500 for other errors
with plain text as an explanation.

7 Outstanding Issues

This standard blithely guarantees the wedgetail ID is unique across the system, and consequently does not provide a
mechanism to create new patients. As things stand one server must be the "master" and the others agree only it can create
new patients through a separate interface, although other servers could potentially allow updating of patient details,
which then back-propagate through synchronisation.

We need to decide on a hash algorithm, I'm not sure the traditional UNIX crypt() is strong enough for this purpose.

8 Bibliography

[1] http://en.wikipedia.org/wiki/Representational_State_Transfer [2] http://tools.ietf.org/html/rfc2616 [3]
http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.3 [4] http://tools.ietf.org/html/rfc2818 [5]
http://tools.ietf.org/html/rfc2617 [6] http://ozdoc.mine.nu/pitifil/PITFormat.html [7] http://www.hl7.org.au/